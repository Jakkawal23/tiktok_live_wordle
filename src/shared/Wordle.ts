// src/shared/Wordle.ts
// -------------------------------------------------------
// üìå ENUM ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏î‡∏≤
// Correct = ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
// OutOfPlace = ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î
// Wrong = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
// NotUsed = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
// ---------------------------
// Enum ‡∏ö‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
// ---------------------------
export enum CharState {
  Correct = 0,     // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å
  OutOfPlace,      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î
  Wrong,           // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ú‡∏¥‡∏î
  NotUsed,         // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
}

// Emoji ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å CharState)
const emojiColors: Record<CharState, string> = {
  [CharState.Correct]: "üü©",
  [CharState.OutOfPlace]: "üü®",
  [CharState.Wrong]: "‚¨ú",
  [CharState.NotUsed]: "‚¨õ", // ‡∏Å‡∏£‡∏ì‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
}


// ---------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: splitWord
// ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ + ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∞/‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå
// ---------------------------
export function splitWord(word: string) {
  const alphas = word.split("")
  const out: string[] = []

  alphas.forEach((a) => {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞/‡∏™‡∏£‡∏∞‡∏´‡∏•‡∏±‡∏Å
    if (a.match(/[‡∏Å-‡∏Æa-zA-Z]/) || a.match(/[‡πÉ‡πÄ‡πÅ‡πÇ‡πÑ‡∏≤‡∏≥‡∏∞‡πÜ‡∏Ø‡∏§‡∏≤]/)) {
      out.push(a)
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏£‡∏∞‡∏ö‡∏ô/‡∏•‡πà‡∏≤‡∏á/‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå ‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      out[out.length - 1] += a
    }
  })

  return out
}

// ---------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏™‡∏£‡∏∞/‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// ---------------------------
function isUpperOrLowerCharacter(char: string): boolean {
  return !char.match(/[‡∏Å-‡∏Æa-zA-Z]/) && !char.match(/[‡πÉ‡πÄ‡πÅ‡πÇ‡πÑ‡∏≤‡∏≥‡∏∞‡πÜ‡∏Ø‡∏§‡∏≤]/)
}

// ---------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: normalizeWord
// ‡∏•‡∏ö character ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
// ---------------------------
export function normalizeWord(word: string) {
  return word.replace(/[^‡∏Å-‡∏Æ‡πÉ‡πÄ‡πÅ‡πÇ‡πÑ‡∏≤‡∏≥‡∏∞‡πÜ‡∏Ø‡∏§‡∏≤a-zA-Z]/g, "")
}

// ---------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: validateWord
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
// ---------------------------
export function validateWord(word: string, solution: string) {
  // ‡πÉ‡∏´‡πâ array ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö string | null
  const wordSplitted: (string | null)[] = splitWord(word)
  const wordNormalizedSplitted: (string | null)[] = splitWord(normalizeWord(word))
  const solutionSplitted: (string | null)[] = splitWord(solution)
  const solutionNormalizedSplitted: (string | null)[] = splitWord(normalizeWord(solution))

  // Default: ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const output = wordSplitted.map((char) => ({ correct: CharState.Wrong, char: char ?? "" }))

  // First Pass: ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ñ‡∏π‡∏Å + ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å
  solutionSplitted.forEach((sChar, idx) => {
    const sNormalized = solutionNormalizedSplitted[idx]
    const char = wordSplitted[idx]
    const cNormalized = wordNormalizedSplitted[idx]

    if ((char && sChar && char === sChar) || (cNormalized && sNormalized && cNormalized === sNormalized)) {
      solutionSplitted[idx] = null
      solutionNormalizedSplitted[idx] = null
      wordSplitted[idx] = null
      wordNormalizedSplitted[idx] = null

      output[idx] = { correct: CharState.Correct, char: sChar ?? "" }
    }
  })

  // Second Pass: ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ñ‡∏π‡∏Å ‡πÅ‡∏ï‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î
  solutionSplitted.forEach((_sChar, idx) => {
    const char = wordSplitted[idx]

    if (char) {
      const cNormalized = wordNormalizedSplitted[idx]

      if (
        solutionSplitted.includes(char) ||
        (cNormalized && solutionNormalizedSplitted.includes(cNormalized))
      ) {
        let correctChar: string | null = null

        const idx1 = solutionSplitted.indexOf(char)
        const idx2 = cNormalized ? solutionNormalizedSplitted.indexOf(cNormalized) : -1

        if (idx1 !== -1) {
          correctChar = solutionSplitted[idx1]
          solutionSplitted[idx1] = null
          solutionNormalizedSplitted[idx1] = null
          wordSplitted[idx] = null
          wordNormalizedSplitted[idx] = null
        } else if (idx2 !== -1) {
          correctChar = solutionSplitted[idx2]
          solutionSplitted[idx2] = null
          solutionNormalizedSplitted[idx2] = null
          wordSplitted[idx] = null
          wordNormalizedSplitted[idx] = null
        }

        output[idx] = { correct: CharState.OutOfPlace, char: correctChar ?? "" }
      }
    }
  })

  return output
}

// ---------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: generateAlphabetStateMap
// ‡∏ó‡∏≥‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
// ---------------------------
export function generateAlphabetStateMap(
  alphabets: string[],
  validations: Array<{ correct: CharState; char: string }> = []
): Record<string, CharState> {
  const map: Record<string, CharState> = {}

  alphabets.forEach((a) => {
    map[a] = CharState.NotUsed
  })

  validations.forEach(({ correct, char }) => {
    char.split("").forEach((c) => {
      if (correct < map[c]) {
        map[c] = correct
      }

      if (isUpperOrLowerCharacter(c) && map[c] === CharState.Wrong) {
        map[c] = CharState.NotUsed
      }
    })
  })

  return map
}

// ---------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: getShareResults
// ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô Emoji string
// ---------------------------
export function getShareResults(attempts: Array<Array<Partial<{ correct: CharState }>>>) {
  return attempts.map((attempt) => {
    return attempt
      .map(({ correct }) => {
        return emojiColors[correct ?? CharState.Wrong]
      })
      .join("")
  })
}
